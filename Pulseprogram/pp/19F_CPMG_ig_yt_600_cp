/*
19F_CPMG_ig_yt_600_cp
modified from Overbeck's sequence by Y. Toyama
May 19th, 2023
ref : Journal of Biomolecular NMR (2020) 74:753-66 

add 1H decoupling during acquisition
add 1H decoupling during the CPMG period to prevent the 19F-1H scalar coupling evolution
compensate the phase evolution during p1 pulse 
add a gradient before triple excitation pulse

l7 is set manually to be compatible with older topspin. 

pulse sequence for 19F CPMG including an anti-ringing sequence
Time_T2 (d15) is the length of the relaxation delay
tau_cpmg = Time_T2/4*ncyc is the time between two 180C pulses, where ncyc is the entry in the vclist
CPMG frequency = ncyc/Time_T2 (number of 360C 19F rotations per second)
CPMG frequency should not go over 5 kHz (or 2 kHz on BBO)
Jan Overbeck 2020
*/


#include <Avance.incl>
#include <Grad.incl>
#include <Delay.incl>

/*  Define phases */

#define zero ph=0.0
#define one ph=90.0
#define two ph=180.0
#define three ph=270.0

/*  Define loop counter */

define list<loopcounter> ncyc_cp = <$VCLIST>
"l2=0" ; loopcounter for CPMG experiments in vclist
"l5=0" ; counter for number of pi pulses in actual CPMG
"l6=0" ; counter for number of pi pulses during compensation
"l8=0" ; l5 -1
"l9=0" ; l6 -1

/*  Define delays */

define delay Time_T2
define delay Tau_cpmg_a 
define delay Tau_cpmg_a1
define delay Tau_cpmg_c 
define delay Tau_cpmg_c1
define delay dly_lk

"dly_lk = d17"
"d11=30m"
"d13=4u"
"Time_T2=d15"

"acqt0=-p1*2.0/PI"
"p2=p1*2"


1 ze

2 d11 do:f2

  "l5 = trunc(ncyc_cp[l2]+0.3)"
  "l8 = trunc(ncyc_cp[l2]+0.3)-1"

3 4u  pl1:f1  pl12:f2  

  if "l5 > 0"  
  { 
  "Tau_cpmg_a = (Time_T2/(4*l5)) - p1" 
  "Tau_cpmg_a1 = Tau_cpmg_a - p1*2/PI - 2u" 
   }

; ---------------------------------
/*--------------------------------
; calculation number of 
; heating compensation pulses
; for the next experiment
; -------------------------------*/

  "l6 = l7 - l5"
  "l9 = l7 - l5 - 1"

/*  heating compensation*/

if "l6 > 0"
  {
  "Tau_cpmg_c = (Time_T2/(4*l6)) - p1"
  "Tau_cpmg_c1 = Tau_cpmg_c - 2u"

   2u pl11:f2
   Tau_cpmg_c1 cpd5:f2 zero ; CW ON
   (p1*2 ph2):f1
   Tau_cpmg_c
if "l9 > 0"
  {
4 Tau_cpmg_c 
  (p1*2 ph2):f1
  Tau_cpmg_c
  lo to 4 times l9
  }
  }

if "l6 > 0"
  {
if "l9 > 0"
  {
5 Tau_cpmg_c
  (p1*2 ph2):f1
  Tau_cpmg_c
  lo to 5 times l9
  }
  Tau_cpmg_c
  (p1*2 ph2):f1
  Tau_cpmg_c1            
  2u do:f2               ; CW off 
  }
else ; the recycle delay should stay constant
  {
  Time_T2
  }
  100u


/* Purge element */

  20u UNBLKGRAD           ; delay(20.0e-6) unblank gradients & lk_hold
  2u pl13:f1
  (2u cw zero):f1
  dly_lk                  ; turn on cw decoupling for a delay of dly_lk
  2u do:f1
  (2u cw one):f1
  "DELTA = dly_lk/2.0"
  DELTA                   ; turn on cw decoupling for a delay of dly_lk
  2u do:f1
  p50:gp0*0.5             ; gradient 0 (50%)
  d16
  2u pl1:f1
  (p1 zero):f1            ; F90x
  2u                     
  p50:gp0                 ; gradient 0
  d16                  
  (p1 one):f1             ; F90y
  2u                     
  p50:gp0*0.3             ; gradient 0 (30%)
  d16                  
  10u BLKGRAD             ; delay(10.0e-6) blank gradients


6 d1

/* this is the real start */

  50u UNBLKGRAD
  p51:gp1
  d16
  (p1 ph1):f1

/* CPMG block */

  if "l5 > 0"
   {
   2u pl11:f2
   Tau_cpmg_a1 cpd5:f2 zero ; CW ON
   (p1*2 ph2):f1
   Tau_cpmg_a
  if "l8 > 0"
   {
7  Tau_cpmg_a
   (p1*2 ph2):f1
   Tau_cpmg_a
   lo to 7 times l8
   }
   }
  if "l5 > 0"
   {
  if "l8 > 0"
   {
8  Tau_cpmg_a
   (p1*2 ph2):f1
   Tau_cpmg_a
   lo to 8 times l8
   }
   Tau_cpmg_a
   (p1*2 ph2):f1
   Tau_cpmg_a1            
   2u do:f2                ; CW off 
   }

   (p1 ph3):f1
   d13  

   p52:gp2               
   d16 pl12:f2           ; lower power for 1H decoupling

/*  anti-ringing */

   (p1 ph1):f1
   1u
   (p1 ph4):f1
   1u
   (p1 ph5):f1

   4u BLKGRAD
   go=2 ph31 cpd2:f2    ; acquire fid with 1H decoupling during aq
   d11 do:f2 mc #0 to 2 
   F1QF(calclc(l2,1)) 


HaltAcqu, 1m
exit


ph1=0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 
ph2=1 1 1 1 1 1 1 1 3 3 3 3 3 3 3 3 1 1 1 1 1 1 1 1 3 3 3 3 3 3 3 3 0 0 0 0 0 0 0 0 2 2 2 2 2 2 2 2 0 0 0 0 0 0 0 0 2 2 2 2 2 2 2 2
ph3=2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
ph4=2 0 2 0 2 0 2 0 2 0 2 0 2 0 2 0 0 2 0 2 0 2 0 2 0 2 0 2 0 2 0 2 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 1 3 1 3 1 3 1 3 1 3 1 3 1 3 1 3  
ph5=0 0 2 2 1 1 3 3 0 0 2 2 1 1 3 3 2 2 0 0 3 3 1 1 2 2 0 0 3 3 1 1 1 1 3 3 2 2 0 0 1 1 3 3 2 2 0 0 3 3 1 1 0 0 2 2 3 3 1 1 0 0 2 2 
ph26=0
ph31=0 2 2 0 1 3 3 1 0 2 2 0 1 3 3 1 2 0 0 2 3 1 1 3 2 0 0 2 3 1 1 3 1 3 3 1 2 0 0 2 1 3 3 1 2 0 0 2 3 1 1 3 0 2 2 0 3 1 1 3 0 2 2 0

;pl1 : f1 channel - power level for pulse (default)
;p1 : f1 channel -  90 degree high power pulse
;p2 : f1 channel - 180 degree high power pulse
;pl11 : f2 channel - power level for 1H decoupling during CPMG (10~14 kHz)
;pl12 : f2 channel - power level for 1H decoupling during acquisition
;pl13 : f1 channel - power level for scrambling , typically about 23dB less power than high power
;d1   : relaxation delay; 1-5 * T1
;d11  : delay for disk I/O                             [30 msec]
;d15  : length of the CPMG relaxation delay
;d16  : Gradient recovery delay [200 us]
;d17  : delay for scrambling - set to 40 ms
;vc   : variable loop counter, taken from vc-list
;l7   : ncyc_max (MUST BE SET PROPERLY!)
;cpdprg2: 1H decoupling during acquistion (WALTZ or GARP)
;cpdprg5: 1H CW decoupling during CPMG (cwp)
;ns: 8 * n or 64*n
;ds: > 128
;td1: number of experiments = number of values in vc-list
;define VCLIST
;this pulse program produces a ser-file (PARMOD = 2D)
